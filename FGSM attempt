library(tidyverse)
library(keras)
library(tensorflow)
library(reticulate)

install_tensorflow(extra_packages="pillow")
install_keras()

setwd("C:/Users/15135/Downloads/IE332 Project 2")
model<-load_model_tf("./dandelion_model")

## TEST MODEL
res=c("","")
f=list.files("./grass")
for (i in f){
  test_image <- image_load(paste("./grass/",i,sep=""),
                           target_size = c(224,224))
  x <- image_to_array(test_image)
  x <- array_reshape(x, c(1, dim(x)))
  x <- x/255
  
  pred <- model %>% predict(x)
  if(pred[1,2]<0.50){
    print(i)
  }
  print(pred)
}

## Testing one image
print(pred[1,2])


## Creating a vector with the losses from og model to conduct regression
loss_fxn <- function(f){
  loss_vec <- c()
  for (i in f){
    test_image <- image_load(paste("./grass/",i,sep=""),
                             target_size = c(224,224))
    x <- image_to_array(test_image)
    x <- array_reshape(x, c(1, dim(x)))
    x <- x/255
    pred <- model %>% predict(x)
    loss_vec[i] <- pred[1,1]
    return(loss_vec)
}



## FGSM Attempt

fgsm_attack_grass <- function(x){
  
  
  #Get current label and prediction label
  #Compute Gradient of the loss function
  #Compute the sign of the gradient
  #Compute adversary images
  #Construct image adversary
  #adversary <- (image + (signedGrad * eps))
  
  ################################################
  
  # import the necessary packages
  from tensorflow.keras.losses import MSE
  import tensorflow as tf
  def generate_image_adversary(model, image, label, eps=2 / 255.0):
    # cast the image
    image = tf.cast(image, tf.float32)
  
  # record our gradients
  with tf.GradientTape() as tape:
    # explicitly indicate that our image should be tacked for
    # gradient updates
    tape.watch(image)
  # use our model to make predictions on the input image and
  # then compute the loss
  pred = model(image)
  loss = MSE(label, pred)
  
  # calculate the gradients of loss with respect to the image, then
  # compute the sign of the gradient
  gradient = tape.gradient(loss, image)
  signedGrad = tf.sign(gradient)
  # construct the image adversary
  adversary = (image + (signedGrad * eps)).numpy()
  # return the image adversary to the calling function
  return adversary
  
  # loop over a sample of our testing images
  for i in np.random.choice(np.arange(0, len(testX)), size=(10,)):
    # grab the current image and label
    image = testX[i]
  label = testY[i]
  # generate an image adversary for the current image and make
  # a prediction on the adversary
  adversary = generate_image_adversary(model,
                                       image.reshape(1, 28, 28, 1), label, eps=0.1)
  pred = model.predict(adversary)
}

## Source: https://pyimagesearch.com/2021/03/01/adversarial-attacks-with-fgsm-fast-gradient-sign-method/
